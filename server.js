require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { db, plans, orders, documents } = require('./db');
const { eq } = require('drizzle-orm');
const { v4: uuidv4 } = require('uuid');

const generatePlan = require('./services/openai');
const generateWord = require('./services/word');
const generatePrompt = require('./services/prompt');
const generatePrompt2 = require('./services/prompt2');
const generatePromptForm1 = require('./services/tilda/promptForm1');
const generatePromptForm2 = require('./services/tilda/promptForm2');
const generatePlanTilda = require('./services/tilda/openai');
const { STRUCTURES, TILDA_STRUCTURE, systemPromptForm1, systemPromptForm2} = require('./services/consts');

const YooKassa = require('yookassa');
const {sendFull, sendToAdminsOnly} = require("./services/mailer");
const {extractPreviewBlocks, preprocessText, buildPaymentParams} = require("./services/utils");
const OpenAI = require("openai");
const yookassa = new YooKassa({
  shopId: process.env.YOOKASSA_SHOP_ID,
  secretKey: process.env.YOOKASSA_SECRET_KEY,
});

const app = express();

app.use(cors({
  origin: 'https://biznesplan.online',
  methods: ['POST'],
  allowedHeaders: ['Content-Type'],
  optionsSuccessStatus: 204
}));
app.use(express.json());

app.post('/tilda-submit-by-sections', express.urlencoded({ extended: true }), async (req, res) => {
  const data = req.body;
  console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ—Ç Tilda:', data);

  if (!data.email) {
    console.warn('‚ùå –ù–µ—Ç email –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã');
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω email' });
  }

  if (data.formname !== 'form1' && data.formname !== 'form2') {
    console.warn('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π formname:', data.formname);
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π formname' });
  }

  const isForm1 = data.formname === 'form1';
  const orderId = uuidv4();

  console.log('üìù –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å ID:', orderId);

  await db.insert(orders).values({
    id: orderId,
    email: data.email,
    form_type: data.formname,
    form_data: data,
    status: 'pending'
  });

  const returnUrl = data.source_url || 'https://biznesplan.online';

  try {
    const amount = isForm1 ? process.env.FORM1_PRICE : process.env.FORM2_PRICE;
    console.log('üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', amount);

    const paymentPayload = buildPaymentParams({ amount, returnUrl, email: data.email, orderId });
    const payment = await yookassa.createPayment(paymentPayload, orderId);

    console.log('‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', payment.id);

    await db.update(orders).set({
      yookassa_payment_id: payment.id,
      yookassa_status: payment.status
    }).where(eq(orders.id, orderId));

    startSectionGenerationForMultipleDocs({ orderId, email: data.email, data }).catch(console.error);

    return res.json({ confirmation_url: payment.confirmation.confirmation_url });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞:', err);
    await db.update(orders).set({ status: 'error' }).where(eq(orders.id, orderId));
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});


async function startSectionGenerationForMultipleDocs({ orderId, email, data }) {
  const isForm1 = data.formname === 'form1';

  const prompts = isForm1
    ? [generatePromptForm1(data)]
    : await generatePromptForm2(data);

  const systemPrompt = isForm1 ? systemPromptForm1 : systemPromptForm2;

  for (let i = 0; i < prompts.length; i++) {
    const prompt = prompts[i];
    const documentId = uuidv4();

    await db.insert(documents).values({
      id: documentId,
      order_id: orderId,
      doc_type: 'business_plan',
      status: 'pending'
    });

    await startSectionGeneration({
      documentId,
      orderId,
      email,
      basePrompt: prompt,
      systemPrompt
    });
  }
}




app.post('/tilda-submit', express.urlencoded({ extended: true }), async (req, res) => {
  const data = req.body;
  console.log('üì• –ü–æ–ª—É—á–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã –æ—Ç Tilda:', data);

  if (!data.email) {
    console.warn('‚ùå –ù–µ—Ç email –≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º—ã');
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω email' });
  }

  if (data.formname !== 'form1' && data.formname !== 'form2') {
    console.warn('‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π formname:', data.formname);
    return res.status(400).json({ error: '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π formname' });
  }

  const isForm1 = data.formname === 'form1';
  const orderId = uuidv4();

  console.log('üìù –°–æ–∑–¥–∞—ë–º –∑–∞–∫–∞–∑ —Å ID:', orderId);

  await db.insert(orders).values({
    id: orderId,
    email: data.email,
    form_type: data.formname,
    form_data: data,
    status: 'pending'
  });

  const returnUrl = `${data.source_url || 'https://biznesplan.online'}`;

  try {
    const amount = isForm1 ? process.env.FORM1_PRICE : process.env.FORM2_PRICE;
    console.log('üí≥ –°—É–º–º–∞ –ø–ª–∞—Ç–µ–∂–∞:', amount);

    const paymentPayload = buildPaymentParams({ amount, returnUrl, email: data.email, orderId });

    const payment = await yookassa.createPayment(paymentPayload, orderId);

    console.log('‚úÖ –ü–ª–∞—Ç—ë–∂ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω:', payment.id);

    await db.update(orders).set({
      yookassa_payment_id: payment.id,
      yookassa_status: payment.status
    }).where(eq(orders.id, orderId));

    // –§–æ–Ω: –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –ø–ª–∞–Ω–æ–≤
    (async () => {
      try {
        console.log('‚öôÔ∏è –ù–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–æ–≤...');

        const prompts = isForm1
          ? [generatePromptForm1(data)]
          : await generatePromptForm2(data); // form2 ‚Üí –º–∞—Å—Å–∏–≤ –∏–∑ 3-—Ö

        for (let i = 0; i < prompts.length; i++) {
          const prompt = prompts[i];
          const documentId = uuidv4();
          console.log(`üß† –ì–µ–Ω–µ—Ä–∞—Ü–∏—è GPT –¥–ª—è –¥–æ–∫—É–º–µ–Ω—Ç–∞ ${i + 1} / ${prompts.length}`);

          const response = await generatePlanTilda(prompt, data.formname);

          await db.insert(documents).values({
            id: documentId,
            order_id: orderId,
            doc_type: 'business_plan',
            gpt_prompt: prompt,
            gpt_response: response,
            status: 'completed'
          });

          console.log(`‚úÖ –î–æ–∫—É–º–µ–Ω—Ç ${i + 1} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –∏ –∑–∞–ø–∏—Å–∞–Ω –≤ –±–∞–∑—É`);
        }

        const buffers = await generateTildaBuffers(orderId);

        console.log('üì® –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º...');
        await sendToAdminsOnly(buffers, data.email);
        console.log('‚úÖ –í—Å–µ –ø–ª–∞–Ω—ã –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º');

        await db.update(orders).set({
          status: 'completed',
          updated_at: new Date()
        }).where(eq(orders.id, orderId));

        console.log('üì¶ –°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞ "completed"');

      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–æ–≤ –≤ —Ñ–æ–Ω–µ:', err);
        await db.update(orders).set({ status: 'error' }).where(eq(orders.id, orderId));
      }
    })();

    return res.json({ confirmation_url: payment.confirmation.confirmation_url });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ–ø–ª–∞—Ç—ã –∏–ª–∏ –∑–∞–ø–∏—Å–∏ –∑–∞–∫–∞–∑–∞:', err);
    await db.update(orders).set({ status: 'error' }).where(eq(orders.id, orderId));
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/yookassa-webhook-tilda', express.json(), async (req, res) => {
  try {
    const body = req.body;
    console.log(body)

    if (body.event !== 'payment.succeeded') return res.sendStatus(200);

    const payment = body.object;
    const orderId = payment.metadata?.orderId;

    if (!orderId) return res.status(400).send('‚ùå –ù–µ—Ç orderId –≤ metadata');

    const [order] = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);
    if (!order) {
      console.warn(`‚ùå –ó–∞–∫–∞–∑ –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ ID: ${orderId}`);
      return res.sendStatus(404);
    }

    if (order.yookassa_status === 'succeeded') return res.sendStatus(200);

    const now = new Date();

    await db.update(orders).set({
      yookassa_status: 'succeeded',
      is_paid: true,
      paid_at: now,
      updated_at: now,
    }).where(eq(orders.id, orderId));

    console.log(`‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ –∑–∞–∫–∞–∑—É ${orderId} –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞`);
    await trySendTildaOrderById(orderId);

    return res.sendStatus(200);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /yookassa-webhook:', err);
    return res.sendStatus(500);
  }
});

async function safeSendFull(docx, email, retries = 3, delayMs = 3000) {
  for (let i = 0; i < retries; i++) {
    try {
      await sendFull(docx, email);
      return true;
    } catch (err) {
      console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞ (–ø–æ–ø—ã—Ç–∫–∞ ${i + 1}):`, err);
      await new Promise(res => setTimeout(res, delayMs));
    }
  }
  return false;
}

async function trySendTildaOrderById(orderId, retries = 30, intervalMs = 10000) {
  for (let i = 0; i < retries; i++) {
    const [order] = await db.select().from(orders).where(eq(orders.id, orderId)).limit(1);
    if (!order) {
      console.error(`‚ùå –ó–∞–∫–∞–∑ ${orderId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    if (order.status === 'completed' && !order.sent_at) {
      const buffers = await generateTildaBuffers(orderId);

      if (buffers.length > 0) {
        const success = await safeSendFull(buffers.length === 1 ? buffers[0] : buffers, order.email);
        if (success) {
          await db.update(orders).set({ sent_at: new Date() }).where(eq(orders.id, orderId));
          console.log(`üì® –ü–ª–∞–Ω—ã –ø–æ –∑–∞–∫–∞–∑—É ${orderId} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–ª–∏–µ–Ω—Ç—É`);
        } else {
          console.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø–∏—Å—å–º–∞ –∫–ª–∏–µ–Ω—Ç—É ${order.email}`);
        }
      } else {
        console.warn(`‚è≥ –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É ${orderId} –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤—ã`);
      }

      return;
    }

    console.log(`‚è≥ –ó–∞–∫–∞–∑ ${orderId} –µ—â—ë –Ω–µ –∑–∞–≤–µ—Ä—à—ë–Ω. –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}/${retries}`);
    await new Promise(resolve => setTimeout(resolve, intervalMs));
  }

  console.warn(`‚ö†Ô∏è –î–æ–∫—É–º–µ–Ω—Ç—ã –ø–æ –∑–∞–∫–∞–∑—É ${orderId} –Ω–µ –±—ã–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø–æ—Å–ª–µ ${retries} –ø–æ–ø—ã—Ç–æ–∫`);
}

async function generateTildaBuffers(orderId) {
  const docs = await db.select().from(documents).where(eq(documents.order_id, orderId));
  const buffers = await Promise.all(
    docs
      .filter(doc => doc.status === 'completed' && doc.gpt_response)
      .map(async doc => {
        const clean = preprocessText(doc.gpt_response);
        return await generateWord(clean, null, TILDA_STRUCTURE);
      })
  );

  if (buffers.length === 0) {
    console.warn(`‚ö†Ô∏è –ù–µ—Ç –≥–æ—Ç–æ–≤—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ generateTildaBuffers –¥–ª—è orderId: ${orderId}`);
  }

  return buffers;
}

const PORT = process.env.PORT || 3003;
app.listen(PORT, () => console.log(`üöÄ Server on port ${PORT}`));
