require('dotenv').config();
const express = require('express');
const cors = require('cors');
const { db, plans } = require('./db');
const { eq } = require('drizzle-orm');
const { v4: uuidv4 } = require('uuid');

const generatePlan = require('./services/openai');
const generateWord = require('./services/word');
const generatePrompt = require('./services/prompt');
const generatePromptForm2 = require('./services/prompt2');
const { STRUCTURES } = require('./services/consts');

const YooKassa = require('yookassa');
const {sendFull, sendToAdminsOnly} = require("./services/mailer");
const yookassa = new YooKassa({
  shopId: process.env.YOOKASSA_SHOP_ID,
  secretKey: process.env.YOOKASSA_SECRET_KEY,
});

const app = express();

app.use(cors({
  origin: 'https://biznesplan.online',
  methods: ['POST'],
  allowedHeaders: ['Content-Type'],
  optionsSuccessStatus: 204
}));
app.use(express.json());

app.post('/submit-and-pay', async (req, res) => {
  const { data, formType } = req.body;

  if (!data?.email) {
    return res.status(400).json({ error: '–ù–µ —É–∫–∞–∑–∞–Ω email' });
  }

  const id = uuidv4();

  // –°–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∑–∞–ø–∏—Å—å –≤ –ë–î
  await db.insert(plans).values({
    id,
    email: data.email,
    form_data: data,
    status: 'pending'
  });

  try {
    // === –°–ù–ê–ß–ê–õ–ê —Å–æ–∑–¥–∞—ë–º –ø–ª–∞—Ç—ë–∂ ===
    const payment = await yookassa.createPayment({
      amount: {
        value: process.env.PLAN_PRICE || '990.00',
        currency: 'RUB',
      },
      confirmation: {
        type: 'redirect',
        return_url: `https://biznesplan.online/payment-success?id=${id}`,
      },
      capture: true,
      description: `–û–ø–ª–∞—Ç–∞ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞ –¥–ª—è ${data.email}`,
      metadata: { planId: id },
      receipt: {
        customer: { email: data.email },
        items: [{
          description: "–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω",
          quantity: 1,
          amount: {
            value: process.env.PLAN_PRICE || '990.00',
            currency: 'RUB'
          },
          vat_code: 1,
          payment_mode: 'full_payment',
          payment_subject: 'service'
        }]
      }
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø–ª–∞–Ω —Å ID –ø–ª–∞—Ç–µ–∂–∞
    await db.update(plans).set({
      yookassa_payment_id: payment.id,
      yookassa_status: payment.status
    }).where(eq(plans.id, id));

    // === –§–û–ù: –Ω–∞—á–∏–Ω–∞–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é ===
    (async () => {
      try {
        const prompt = formType === 'form2'
          ? generatePromptForm2(data)
          : generatePrompt(data);

        const response = await generatePlan(prompt);
        const clean = preprocessText(response);
        const supportType = data?.supportType;
        const structure = STRUCTURES[supportType] || STRUCTURES.default;

        const fullDocx = await generateWord(clean, null, structure);
        await sendToAdminsOnly(fullDocx, data.email);

        await db.update(plans).set({
          gpt_prompt: prompt,
          gpt_response: response,
          status: 'completed',
          updated_at: new Date()
        }).where(eq(plans.id, id));
      } catch (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤ —Ñ–æ–Ω–µ:', err);
        await db.update(plans).set({ status: 'error' }).where(eq(plans.id, id));
      }
    })();

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –æ–ø–ª–∞—Ç—É –°–†–ê–ó–£
    return res.json({ confirmation_url: payment.confirmation.confirmation_url });

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã:', err);
    await db.update(plans).set({ status: 'error' }).where(eq(plans.id, id));
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –æ–ø–ª–∞—Ç—ã' });
  }
});

app.get('/payment-success', async (req, res) => {
  const { id } = req.query;
  if (!id) return res.status(400).send('‚ùå –û—à–∏–±–∫–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞');

  try {
    const [plan] = await db.select().from(plans).where(eq(plans.id, id)).limit(1);
    if (!plan) return res.status(404).send('‚ùå –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω');

    // 1. –ï—Å–ª–∏ —É–∂–µ –æ–ø–ª–∞—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω
    if (plan.is_paid) {
      return res.send('‚úÖ –ü–ª–∞—Ç—ë–∂ —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –ü–ª–∞–Ω —É–∂–µ –±—ã–ª –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.');
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º —É YooKassa —Å–≤–µ–∂–∏–π —Å—Ç–∞—Ç—É—Å
    if (!plan.yookassa_payment_id) {
      return res.status(400).send('‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω ID –ø–ª–∞—Ç–µ–∂–∞');
    }

    const paymentInfo = await yookassa.getPayment(plan.yookassa_payment_id);
    const isPaid = paymentInfo.status === 'succeeded';

    if (!isPaid) {
      return res.send(`
        ‚è≥ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ü–ª–∞—Ç—ë–∂ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è...
        –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥ –∏ –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É.
      `);
    }

    // 3. –û–±–Ω–æ–≤–∏–º —Å—Ç–∞—Ç—É—Å –≤ –±–∞–∑–µ, –¥–∞–∂–µ –µ—Å–ª–∏ –ø–ª–∞–Ω –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤
    await db.update(plans).set({
      is_paid: true,
      paid_at: new Date(),
      yookassa_status: 'succeeded'
    }).where(eq(plans.id, id));

    // 4. –ü–ª–∞–Ω —É–∂–µ –≥–æ—Ç–æ–≤ ‚Äî –æ—Ç–ø—Ä–∞–≤–∏–º
    if (plan.status === 'completed' && plan.gpt_response) {
      const supportType = plan.form_data?.supportType;
      const structure = STRUCTURES[supportType] || STRUCTURES.default;

      const fullDocx = await generateWord(plan.gpt_response, structure);
      await sendFull(fullDocx, plan.email);

      await db.update(plans).set({
        sent_at: new Date()
      }).where(eq(plans.id, id));

      return res.send('üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à email.');
    }

    // 4.5. –ü–æ–≤—Ç–æ—Ä–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è, –µ—Å–ª–∏ –±—ã–ª–∞ –æ—à–∏–±–∫–∞
    if (plan.status === 'error') {
      try {
        const prompt = plan.form_type === 'form2'
          ? generatePromptForm2(plan.form_data)
          : generatePrompt(plan.form_data);

        const response = await generatePlan(prompt);
        const clean = preprocessText(response);
        const supportType = plan.form_data?.supportType;
        const structure = STRUCTURES[supportType] || STRUCTURES.default;

        const fullDocx = await generateWord(clean, null, structure);
        await sendFull(fullDocx, plan.email);

        await db.update(plans).set({
          gpt_prompt: prompt,
          gpt_response: response,
          status: 'completed',
          sent_at: new Date(),
          updated_at: new Date()
        }).where(eq(plans.id, id));

        return res.send('üéâ –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email.');
      } catch (retryErr) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:', retryErr);
        return res.send(`
          ‚ö†Ô∏è –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞, –Ω–æ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω–∞.
          –ú—ã —É–≤–µ–¥–æ–º–ª–µ–Ω—ã –∏ —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤—Ä—É—á–Ω—É—é.
          –í—ã —Ç–∞–∫–∂–µ –º–æ–∂–µ—Ç–µ –Ω–∞–ø–∏—Å–∞—Ç—å: buznesplan@yandex.com
        `);
      }
    }

    // 5. –ü–ª–∞–Ω –µ—â—ë –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç—Å—è ‚Äî –ø—Ä–µ–¥—É–ø—Ä–µ–¥–∏–º
    return res.send(`
      ‚úÖ –û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!

      ‚è≥ –í–∞—à –±–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –µ—â—ë –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.
      –û–Ω –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏, –∫–∞–∫ —Ç–æ–ª—å–∫–æ –±—É–¥–µ—Ç –≥–æ—Ç–æ–≤.
      –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –≤ —Ç–µ—á–µ–Ω–∏–µ 10‚Äì15 –º–∏–Ω—É—Ç (–ø–∞–ø–∫–∞ "–°–ø–∞–º" —Ç–æ–∂–µ).
    `);

  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /payment-success:', err);
    return res.status(500).send('‚ùå –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.');
  }
});

app.get('/preview/:id', async (req, res) => {
  const { id } = req.params;

  try {
    const [plan] = await db.select().from(plans).where(eq(plans.id, id)).limit(1);
    if (!plan || !plan.gpt_response) {
      return res.status(404).json({ error: '–ë–∏–∑–Ω–µ—Å-–ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const supportType = plan.form_data?.supportType;
    const structure = STRUCTURES[supportType] || STRUCTURES.default;

    const previewBlocks = extractPreviewBlocks(plan.gpt_response);
    return res.json({ preview: previewBlocks, structure });
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–µ–≤—å—é:', err);
    return res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' });
  }
});

app.post('/yookassa-webhook', express.json(), async (req, res) => {
  try {
    const body = req.body;
    
    console.log(body)

    if (body.event !== 'payment.succeeded') return res.sendStatus(200);

    const payment = body.object;
    const planId = payment.metadata?.planId;

    if (!planId) return res.status(400).send('‚ùå –ù–µ—Ç planId –≤ metadata');

    const [plan] = await db.select().from(plans).where(eq(plans.id, planId)).limit(1);
    if (!plan || plan.is_paid) return res.sendStatus(200); // —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ–ø–ª–∞—Ç—ã
    await db.update(plans).set({
      is_paid: true,
      paid_at: new Date(),
      yookassa_status: 'succeeded'
    }).where(eq(plans.id, planId));

    // –ï—Å–ª–∏ –ø–ª–∞–Ω —É–∂–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω ‚Äî –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
    if (plan.status === 'completed' && plan.gpt_response) {
      const supportType = plan.form_data?.supportType;
      const structure = STRUCTURES[supportType] || STRUCTURES.default;
      const fullDocx = await generateWord(plan.gpt_response, structure);

      await sendFull(fullDocx, plan.email);

      await db.update(plans).set({
        sent_at: new Date()
      }).where(eq(plans.id, planId));

      console.log(`üì¨ –ü–ª–∞–Ω –ø–æ –ø–ª–∞–Ω—É ${planId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ø–æ webhook`);
    }

    return res.sendStatus(200);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤ /yookassa-webhook:', err);
    return res.sendStatus(500);
  }
});

function extractPreviewBlocks(markdown) {
  const lines = markdown.split("\n");
  const blocks = [];
  let currentBlock = null;

  for (let line of lines) {
    const trimmed = line.trim();
    if (!trimmed) continue;

    const heading = /^#\s+(.+)/.exec(trimmed);
    if (heading) {
      if (currentBlock) blocks.push(currentBlock);
      currentBlock = { title: heading[1], content: "" };
    } else if (currentBlock) {
      currentBlock.content += trimmed + "\n";
    }
  }

  if (currentBlock) blocks.push(currentBlock);

  return blocks.slice(0, 2);
}

function preprocessText(text) {
  return text.split('\n')
    .map(line => {
      const trimmed = line.trim();
      if (!trimmed) return '';
      if (/^\d+\.\s+/.test(trimmed)) return `### ${trimmed}`;
      if (/^[–ê-–ØA-Z][^:]+:$/.test(trimmed)) return `**${trimmed.replace(':', '')}**`;
      return trimmed;
    })
    .join('\n')
    .replace(/\(\d{2,4}‚Äì\d{2,4} —Å–ª–æ–≤\)/g, '');
}

const PORT = process.env.PORT || 3003;
app.listen(PORT, () => console.log(`üöÄ Server on port ${PORT}`));
